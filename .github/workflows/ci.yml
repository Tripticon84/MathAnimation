name: Continuous Integration

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

env:
  BUILD_TYPE: Release

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        include:
          - os: windows-latest
            generator: "Visual Studio 17 2022"
            arch: "-A x64"
          - os: ubuntu-latest
            generator: "Ninja"
            arch: ""

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.24.2'

    # Windows specific setup
    - name: Setup YASM (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Invoke-WebRequest -Uri "http://www.tortall.net/projects/yasm/releases/yasm-1.3.0-win64.exe" -OutFile "yasm.exe"
        mkdir -p "$env:RUNNER_TEMP/yasm"
        Move-Item "yasm.exe" "$env:RUNNER_TEMP/yasm/yasm.exe"
        echo "$env:RUNNER_TEMP/yasm" >> $env:GITHUB_PATH
      shell: pwsh

    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v2

    # Linux specific setup
    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          yasm \
          pkg-config \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libxrandr-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev \
          libxext-dev \
          libxfixes-dev \
          libasound2-dev

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -G "${{ matrix.generator }}" ${{ matrix.arch }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

    - name: Build
      run: |
        cd build
        cmake --build . --config ${{ env.BUILD_TYPE }} --parallel

    - name: Run Tests (if available)
      run: |
        cd build
        # Rechercher et exécuter les tests si disponibles
        if [ -f "bin/${{ env.BUILD_TYPE }}/MathAnimationTests" ] || [ -f "bin/${{ env.BUILD_TYPE }}/MathAnimationTests.exe" ]; then
          ctest --output-on-failure -C ${{ env.BUILD_TYPE }}
        else
          echo "No tests found, skipping test execution"
        fi
      shell: bash
      continue-on-error: true  # Les tests peuvent échouer sans faire échouer le build
